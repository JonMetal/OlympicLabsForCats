1.1)
#include <iostream>
#include <cmath>

using namespace std;
int main() 
{
  int N;
  string num = "YES";
  cin >> N;
  if (N > 1)
  {
    for (int i = 2; i < N; i++)
    {
      if(N % i == 0)
      {
        num = "NO";
        break;
      }
    }
    cout << num;
  }
  else
  {
    cout << "NO";
  }
}
1.2)
#include <iostream>
#include <cmath>

using namespace std;
int main() 
{
  int N;
  bool console = true;
  cin >> N;
  if (N > 2)
  {
    for (int i = 2; i <= N; i++)
      {
        console = true;
        for (int j = 2; j*j <= i; j++)
          {
            if((i % j == 0) || (i % j*j == 0))
            {
              console = false;
              break;
            }
          }
        if (console)
        {
          cout << i << " ";
        }
      }
  }
  else 
  {
    cout << N;
  }
}
1.3)
#include <iostream>
#include <cmath>

using namespace std;
int main() 
{
  int N;
  int K;
  cin >> N;
  if (N > 2)
  {
    int array[10000000];
    for (int i = 2; i <= N; i++)
      {
        array[i] = i;
      }
    for (int i = 2; i*i <= N; i++)
      {
        if (array[i] != 0)
        {
          for (int j = 2; i*j <= N; j++)
          {
            K = i*j;
            array[K] = 0;
          }
        } 
      }
    for (int i = 0; i <= N; i++)
      {
        if (array[i] != 0)
          cout << array[i] << " ";
      }
  }
  else
  {
    cout << N;
  }
}
1.4)
#include <iostream>

using namespace std;

int main()
{
    int N, Q, X;
    cin >> N >> Q;
    string num = "prime";
    if (N > 9 && Q > 0)
    {
        for (int i = 0; i < Q; i++)
        {
            cin >> X;
            string num = "prime";
            if (X == 0 || X == 1)
                num = "not";
            if (X < N)
            {
                for (int j = 2; j*j <= X; j++)
                {
                    if (X % j == 0 || X % j*j == 0)
                    {
                        num = "not";
                        break;
                    }
                }
            }
            cout << X << " " << num << "\n";
        }
    }    
}
2.1)
#include <iostream>

using namespace std;

long long factorial(int n)
{
  long long res = 1;
  for (int i = 1; i <= n; i++) {
	res = res * i;
  }
  return res;
}

int main() {
  int N;
  cin >> N;
  long long arrayC[67][67] {};
  // i - n ; j - k
  if (N > 0 && N < 67)
  {
    for (int i = 0; i <= 1; i++)
    {
      
      for (int j = 0; j <= i; j++)
        {
          arrayC[i][j] = (factorial(i) / (factorial(j) * factorial(i-j)));
          cout << arrayC[i][j] << " ";
        }
        cout << "\n";
    }  
  for (int i = 2; i <= N; i++)
    {
      
      for (int j = 0; j <= i; j++)
        {
          arrayC[i][j] = arrayC[i-1][j-1] + arrayC[i-1][j];
          cout << arrayC[i][j] << " ";
        }
      cout << "\n";
    }  
  }
  else
  {
    cout << "1";
  }
}
2.2)
#include <iostream>

using namespace std;

long long factorial(int n)
{
  long long res = 1;
  for (int i = 1; i <= n; i++) {
	res = res * i;
  }
  return res;
}

int main() {
  int N;
  cin >> N;
  long long arrayC[67][67] {};
  // i - n ; j - k
  if (N > 0 && N < 67)
  {
    for (int i = 0; i <= 1; i++)
    {
      
      for (int j = 0; j <= i; j++)
        {
          arrayC[i][j] = (factorial(i) / (factorial(j) * factorial(i-j)));
          cout << arrayC[i][j] << " ";
        }
        cout << "\n";
    }  
  for (int i = 2; i <= N; i++)
    {
      
      for (int j = 0; j <= i; j++)
        {
          arrayC[i][j] = arrayC[i-1][j-1] + arrayC[i-1][j];
          cout << arrayC[i][j] << " ";
        }
      cout << "\n";
    }  
  }
  else
  {
    cout << "1";
  }
}
2.3)
#include <iostream>

using namespace std;

long recursePascal(int i, int j) 
{
  if ((j == 0) || (j == i))
    return 1;
  return recursePascal(i - 1, j) + recursePascal(i - 1, j - 1);
}
int main()
{
int N;
  cin >> N;
  for (int i = 0; i <= N; i++) 
  {
    for (int j = 0; j <= i; j++) 
    {
      cout << recursePascal(i, j) << " ";
    }
    cout << "\n";
  }
}
2.4)
#include <iostream>

using namespace std;

long long factorial(int n) {
  long long res = 1;
  for (int i = 1; i <= n; i++) {
    res = res * i;
  }
  return res;
}

int main() 
{
double array[1001][1001];
  int Q;
  int N, G;
  cin >> Q;
  // i - n ; j - k
    for (int i = 0; i <= 1; i++)
    {

      for (int j = 0; j <= i; j++)
        {
          array[i][j] = (factorial(i) / (factorial(j) * factorial(i-j)));
        }
    }
  for (int i = 2; i <= 1000; i++)
    {

      for (int j = 0; j <= i; j++)
        {
          array[i][j] = array[i-1][j-1] + array[i-1][j];
        }
    }
  for (int i = 0; i < Q; i++)
    {
      cin >> N >> G;
      printf("%0.10g\n", array[N][G]);
    }
}
2.5)
#include <iostream>
#include <vector>
#include <math.h>

using namespace std;

int factorial(int n) {
  int res = 1;
  for (int i = 1; i <= n; i++) {
    res = res * i;
  }
  return res;
}

int main() 
{
int T, M;
  int N, K;
  int len = 2000;
  vector<vector<int>> array(len + 1, vector<int>(len + 1));
  cin >> M >> T;
  // i - n ; j - k
  if (((T >= 1) && (T <= 1000000)) && ((M >= 2) && (M <= 1000000000)))
  {
  for (int i = 0; i <= len; i++)
    {
      for (int j = 0; j <= i; j++)
        {
         if ((i > j) && (j > 0))
          {
           array[i][j] = (array[i-1][j-1] + array[i-1][j]) % M;
          }
         else
          {
           array[i][j] = 1;
          }
        }
    }
  for (int i = 0; i < T; i++)
    {
      cin >> N >> K;
      if ((0 <= K) && (K <= N) && (N <= 2000) && (N >= 0)) 
        { 
          cout << array[N][K] << "\n"; 
        } 
      else 
        { 
          cout << "0\n";
        } 
    }    
  }    
}
3.1)
#include <iostream>

using namespace std;
int main() {
  int b, N, num;
  cin >> b;
  cin >> N;
  string numB = "";
  char numChar;
  if (N == 0) cout << N;
  while (N > 0)
    {
      num = N % b;
      if (num > 9)
      {
        numChar = num + 87;
      }
      else
      {
        numChar = num + 48;
      }
      numB = numChar + numB;
      N /= b;
    }

  cout << numB;
}
3.2)
#include <iostream>
#include <string>

using namespace std;

int main() 
{  
  int b, num;
  string N;
  cin >> b;
  cin >> N;
  int len = N.length();
  int sum;
  if (N[0] >= 'a')
  {
    sum = N[0] - 87;
  }
  else
  {
    sum = N[0] - '0';
  }
  for (int i = 0; i < len-1; i++)
    {
      if (N[i+1] >= 'a')
      {
        num = N[i+1] - 87;
      }
      else
      {
        num = N[i+1] - '0';
      }
      sum = sum * b + num;
    }
  cout << "\n";
  cout << sum;
}
3.3)
#include <iostream>
#include <math.h>
#include <string>
#include <vector>

using namespace std;
int main() {
  int b, k;
  double N;
  cin >> b >> k;
  cin >> N;
  int temp;
  int tempK = k;
  int count = 1;
  int countDelete = 0;
  double tempN = N;
  // cout << tempN << endl;
  string numN = "0.";
  string tempString;
  char numChar;
  do {
    tempN *= b;
    temp = (int)tempN;
    tempN = fmod(tempN, 1.0);
    if (temp > 9) {
      numChar = temp + 87;
    } else {
      numChar = temp + 48;
    }
    numN += numChar;
    tempK -= 1;
  } while (tempK >= 0);
  temp = numN[numN.length() - count];
  if (temp >= 'a')
    temp -= 87;
  else
    temp -= 48;
  while ((int)temp % 10 == 0) {
    temp = numN[numN.length() - count];
    temp -= 48;
    if (temp == 0)
      count += 1;
  }
  for (int i = 0; i <= numN.length() - count; i++) {
    if (i - 1 > k) {
      break;
    }
   if (numN[i + 1] >= 'a' && i + 1 != numN.length() && b > 2) {
      if (numN[i + 1] > b / 2 && i > k) {
        if (numN[i] - 86 == b) {
          numN[i - 1] += 1;
          numN[i] = '0';
        } else {
          numN[i] += 1;
        }
      } else {
        if (numN[i + 1] > b / 2 && i > k && i + 1 != numN.length() && b > 2) {
          if (numN[i] - 47 == b) {
            numN[i - 1] += 1;
            numN[i] = '0';
          } else {
            numN[i] += 1;
          }
        }
      }
    }

    tempString += numN[i];
  }
  numN = tempString;
  cout << numN;
}
3.4)
#include <iostream>
#include <math.h>
#include <string>
#include <vector>

using namespace std;
int main() {
  int b, k = 5;
  string N;
  cin >> b;
  cin >> N;
  int shiftLatin = 87;
  int shiftNum = 48;
  int count = -1;
  double tempNum = 0;
  string tempString;
  string stringNum = "";
  char numChar;
  int len = N.length();
  for (int i = 2; i < len; i++)
    {
      if (N[i] >= 'a')
      {
        tempNum += ((N[i] - shiftLatin) * pow(b, count));
      }
      else
      {
        tempNum += ((N[i] - shiftNum) * pow(b, count));
      }
      count -= 1;
    }
  printf("%.5f", tempNum);
}
3.5)
#include <iostream>
#include <math.h>
#include <string>
#include <vector>

using namespace std;
int main() {
  int p, q;
  string N;
  cin >> p >> q >> N;
  int num;
  int shiftLatin = 87;
  int shiftNum = 48;
  int len = N.length();
  long tempSum;
  string tempString;
  if (N[0] >= 'a')
  {
    tempSum = N[0] - shiftLatin;
  }
  else
  {
    tempSum = N[0] - shiftNum;
  }
  for (int i = 0; i < len-1; i++)
    {
      if (N[i+1] >= 'a')
      {
        num = N[i+1] - 87;
      }
      else
      {
        num = N[i+1] - '0';
      }
      tempSum = tempSum * p + num;
    }
  
  char numChar;
  if (tempSum == 0) cout << N;
  while (tempSum > 0)
    {
      num = tempSum % q;
      if (num > 9)
      {
        numChar = num + shiftLatin;
      }
      else
      {
        numChar = num + shiftNum;
      }
      tempString = numChar + tempString;
      tempSum /= q;
    }
  cout << tempString;
}
3.6)
#include <iostream>
#include <math.h>
#include <cmath>
#include <string>
#include <vector>

using namespace std;

long ConvertToDecimalInt(string intNum, int base, int shiftNum, int shiftLatin)
{
    long result;
    int tempNum;
    if (intNum[0] >= 'a')
    {
        result = intNum[0] - shiftLatin;
    }
    else
    {
        result = intNum[0] - shiftNum;
    }
    for (int i = 0; i < intNum.length() - 1; i++)
    {
        if (intNum[i + 1] >= 'a')
        {
            tempNum = intNum[i + 1] - shiftLatin;
        }
        else
        {
            tempNum = intNum[i + 1] - shiftNum;
        }
        result = result * base + tempNum;
    }
    return result;
}

string ConvertToBaseInt(long intNum, int base, int shiftNum, int shiftLatin)
{
    string result = "";
    char numChar;
    int tempInt;

    while (intNum > 0)
    {
        tempInt = intNum % base;
        if (tempInt > 9)
        {
            numChar = tempInt + shiftLatin;
        }
        else
        {
            numChar = tempInt + shiftNum;
        }
        result = numChar + result;
        intNum /= base;
    }
    return result;
}

double ConvertToDecimalFraction(string doubleNum, int base, int shiftNum, int shiftLatin)
{
    double result = 0;
    for (int i = 0; i < doubleNum.length(); i++)
    {
        if (doubleNum[i] == '0')
        {
            continue;
        }
        if (doubleNum[i] >= 'a')
        {
            result += ((doubleNum[i] - shiftLatin) * pow(base, -(i + 1)));
        }
        else
        {
            result += ((doubleNum[i] - shiftNum) * pow(base, -(i + 1)));
        }
    }
    return result;
}

string ConvertToBaseFraction(double doubleNum, int base, int shiftNum, int shiftLatin, int k, int base1)
{
    double fraction;
    bool isTrue = false;
    string result = "";
    for (int i = 0; i < k; i++)
    {
        fraction = doubleNum * base;
        if (fraction > 1 && fraction < 10) {
            result += char(int(fraction) + shiftNum);
            doubleNum = fraction - int(fraction);
        }
        else if (fraction >= 10 && fraction < base) {
            result += char(int(fraction) + shiftLatin);
            doubleNum = fraction - int(fraction);
        }
        else if (0 < fraction && fraction < 1)
        {
            result += "0";
            doubleNum = fraction;
        }
    }

    while (result[result.length() - 1] == '0')
    {
        result.erase(result.length() - 1);
    }

    while (result[result.length() - 1] >=  base / 2 && result[result.length() - 1] == result[result.length() - 2] && base > 2 && result.length() - 2 != k && base1 > 2)
    {
        result.erase(result.length() - 1);
        isTrue = true;
    }

    if (isTrue)
    {
        result[result.length() - 2] += 1;
        result.erase(result.length() - 1);
    }    

    return result;
}
int main() {
    int b1, b2, k;
    string stringN;
    cin >> b1 >> b2 >> k;
    cin >> stringN;
    bool isPoint = false;
    int countPoint = 0;
    int shiftLatin = 87;
    int shiftNum = 48;
    for (int i = 0; i < stringN.length(); i++)
    {
        if (stringN[i] == '.')
        {
            countPoint += 1;
        }
        if (stringN[i] >= 'a' && stringN[i] - shiftLatin >= b1)
        {
            cout << "NO";
            return 0;
        }
        else if (stringN[i] < 'a' && stringN[i] - shiftNum >= b1)
        {
            cout << "NO";
            return 0;
        }
        if (countPoint == 2)
        {
            cout << "NO";
            return 0;
        }
    }

    string stringAfterPointNum = "";
    string stringForwardPoint = "";
    string stringAfterPoint = "";
    for (int i = 0; i < stringN.length(); i++)
    {
        if (stringN[i] == '.')
        {
            isPoint = true;
            break;
        }
        stringForwardPoint += stringN[i];
    }
    if (isPoint)
    {
        int indexPoint = stringN.find('.');
        for (int i = indexPoint + 1; i < stringN.length(); i++)
        {
            stringAfterPoint += stringN[i];
        }
    }
    string stringFinishNum = "";
    string stringAfterPointN = "0." + stringAfterPoint;
    if (!(stringForwardPoint == "0"))
    {
        stringFinishNum += ConvertToBaseInt(ConvertToDecimalInt(stringForwardPoint, b1, shiftNum, shiftLatin), b2, shiftNum, shiftLatin);
    }
    if (stringForwardPoint == "0")
        stringFinishNum = "0";
    double afterPointN = stod(stringAfterPointN);
    if (afterPointN > 0)
    {
        stringFinishNum += '.';
        stringFinishNum += ConvertToBaseFraction(ConvertToDecimalFraction(stringAfterPoint, b1, shiftNum, shiftLatin), b2, shiftNum, shiftLatin, k, b1);
    }
    cout << stringFinishNum;
}
4.1)
#include <iostream>
#include <math.h>
#include <cmath>

using namespace std;


int CountOne(unsigned int N)
{
    int countOne = 0, countOneFinal = 0;
    while (N != 0)
    {
        if (N & 1)
        {
            countOne++;
        }
        else
        {
            if (countOne > countOneFinal)
            {
                countOneFinal = countOne;
            }
            countOne = 0;
        }
        N = N >> 1;
    }
    if (countOne > countOneFinal)
    {
        countOneFinal = countOne;
    }
    return countOneFinal;
}
int main()
{
    int N;
    cin >> N;
    cout << CountOne(N);
}
4.2)
#include <iostream>
#include <math.h>
#include <cmath>

using namespace std;


int CountOne(unsigned int N)
{
    int countOne = 0, countOneFinal = 0;
    while (N != 0)
    {
        if (N & 1)
        {
            countOne++;
        }
        else
        {
            if (countOne > countOneFinal)
            {
                countOneFinal = countOne;
            }
            countOne = 0;
        }
        N = N >> 1;
    }
    if (countOne > countOneFinal)
    {
        countOneFinal = countOne;
    }
    return countOneFinal;
}

int FlipInt(unsigned int N)
{
    unsigned int result = 0;
    for (int i = 0; i < 32; i++)
    {
        if (N & (1 << i))
        {
            result = result | (1 << 32 - 1 - i);
        }
        else
        {
            result = result & ~(1 << 32 - 1 - i);
        }
        //cout << result << endl;
    }
    return result;
}
int main()
{
    int N;
    cin >> N;
    for (int i = 0; i < 32; i++)
    {
        if (N & (1 << 32 - 1 - i))
            cout << '1';
        else
            cout << '0';
    }
    cout << endl;
    N = FlipInt(N);
    cout << N << endl;
    for (int i = 0; i < 32; i++)
    {
        if (N & (1 << 32 - 1 - i))
            cout << '1';
        else
            cout << '0';
    }
}
4.3)
#include <iostream>
#include <math.h>
#include <cmath>

using namespace std;

int RecoveryDegree(unsigned int N)
{
    int result;
    int tempN = N;
    int count = 0;
    int countDegree = 0;
    bool isPrime = false;
    while (!isPrime)
    {
        count = 0;
        tempN = tempN >> 1;
        for (int j = 2; j * j <= tempN; j++)
        {
            if (tempN % j == 0 || tempN % j * j == 0)
            {
                count++;
                break;
            }
        }
        countDegree++;
        if (count == 0)
        {
            isPrime = true;
        }
    }
    result = pow(2, countDegree);
    return result;
}
int main()
{
    int N, num, temp;
    cin >> N;
    for (int i = 0; i < N; i++)
    {
        cin >> num;
        temp = RecoveryDegree(num);
        cout << temp << endl;
    }
}
4.4)
#include <iostream>
#include <math.h>
#include <cmath>

using namespace std;

int RecoveryDegree(unsigned int N)
{
    int result;
    int tempN = N;
    int count = 0;
    int countDegree = 0;
    bool isPrime = false;
    while (!isPrime)
    {
        count = 0;
        tempN = tempN >> 1;
        for (int j = 2; j * j <= tempN; j++)
        {
            if (tempN % j == 0 || tempN % j * j == 0)
            {
                count++;
                break;
            }
        }
        countDegree++;
        if (count == 0)
        {
            isPrime = true;
        }
    }
    result = pow(2, countDegree);
    return result;
}
int main()
{
    int N, num, temp;
    cin >> N;
    for (int i = 0; i < N; i++)
    {
        cin >> num;
        temp = RecoveryDegree(num);
        cout << temp << endl;
    }
}
4.5)
#include <iostream>
#include <math.h>
#include <cmath>
#include <vector>

using namespace std;

void bitsetSet(vector <int>& arr, int idx, int newval, int wordSize)
{
    int index = idx / wordSize;
    int bitIdx = idx % wordSize;
    if (newval == 1)
    {
        arr[index] = arr[index] | (1 << wordSize - 1 - bitIdx);
    }
    else
    {
        arr[index] = arr[index] & ~(1 << wordSize - 1 - bitIdx);
    }
}

int main()
{
    int wordSize = (sizeof(int) * 8);
    vector <int> arrayNum(101);
    int N, M, value, indexFirst;
    cin >> N >> M;
    for (int i = 0; i < N; i++)
    {
        cin >> arrayNum[i];
    }
    while (M > 0)
    {
        cin >> value >> indexFirst;
        bitsetSet(arrayNum, indexFirst, value, wordSize);
        M--;
    }
    for (int i = 0; i < N; i++)
    {
        cout << arrayNum[i] << " ";
    }
}
5.1)
#include <iostream>

using namespace std;

void permut_to_invtab(int a[], int b[], int n) {
  int indexNum = 0;
  int indexB = 0;
  int num = 1;
  for (int j = 0; j < n; j++)
    {
      for (int i = 0; i < n; i++) 
      {
        if (a[i] == num)
        {
          indexNum = i;
          break;
        }
      }
      for (int i = 0; i < indexNum; i++)
        {
          if (a[i] > a[indexNum])
          {
            b[j] += 1;
          }
        }
        num += 1;
    }
  cout << endl;
  
}
int main() {
  int a[1001], len, b[1901];
  cin >> len;
  for (int i = 0; i < len; i++)
    {
      cin >> a[i];
    }
  permut_to_invtab(a, b, len);
  for (int i = 0; i < len; i++)
    {
      cout << b[i] << " ";
    }
}
5.2)
#include <iostream>

using namespace std;

int invtab_to_permut(int b[], int a[], int n)
{
    int count = 0;
    int count2 = 0;
    int countBase = 0;
    for (int i = 0; i < n; i++)
    {
        count = 0;
        for (int j = 0; j < n; j++)
        {
            if (count == b[i])
            {
                countBase++;
                //cout << "I come on base\n";
                count2 = j;
                //cout << count2 << endl;
                while (a[count2] != 0)
                {
                    if (count2 + 1 >= n)
                    {
                        break;
                    }   
                    count2++;
                    //cout << count2 << endl;
                }
                a[count2] = i+1;
                break;
            }
            if (a[j] == 0)
            {
                count++;
                //cout << count << endl;
            }
        }
    }
    if (countBase != n)
        return 0;
    return 1;
}

int main() {
    int len, b[1002], a[1002];
    cin >> len;
    for (int i = 0; i < len; i++)
    {
        cin >> b[i];
    }
    for (int i = 0; i < len; i++)
    {
        a[i] = 0;
    }
    if (invtab_to_permut(b, a, len))
    {
        for (int i = 0; i < len; i++)
        {
            cout << a[i] << " ";
        }
    }
    else
    {
        cout << "NO\n";
    }
}
5.3)
#include <algorithm> 
#include <iostream>
#include <string>

using namespace std;

void next_permut(int a[], int n)
{
    bool isLastPermut = true;
    int tempDelta, tempSwap, indexSwap;
    for (int i = 0; i < n-1; i++)
    {
        if (a[n - 1 - i] > a[n - 2 - i])
        {
            isLastPermut = false;
            tempDelta = a[n - 2 - i] - a[n - 1 - i];
            indexSwap = n - 1 - i;
            for (int j = n - 1 - i; j < n; j++)
            {
                if (a[n - 2 - i] - a[j] > tempDelta && a[n - 2 - i] - a[j] < 0)
                {
                    tempDelta = a[n - 2 - i] - a[j];
                    indexSwap = j;
                }
            }
            tempSwap = a[n - 2 - i];
            a[n - 2 - i] = a[indexSwap];
            a[indexSwap] = tempSwap;
            for (int j = n - 1 - i; j < (n - i - 1 + n)/2; j++)
            {
                tempSwap = a[j];
                a[j] = a[n - j +(n - 2 - i)];
                a[n - j + (n - 2 - i)] = tempSwap;
            }
            break;
        }
    }
    if (isLastPermut)
    {
        for (int i = 0; i < n / 2; i++)
        {
            tempSwap = a[i];
            a[i] = a[n - 1 - i];
            a[n - 1 - i] = tempSwap;
        }
    }
}

int main() {
    int len, a[1002];
    cin >> len;
    for (int i = 0; i < len; i++)
    {
        cin >> a[i];
    }
    next_permut(a, len);
    for (int i = 0; i < len; i++)
    {
        cout << a[i] << " ";
    }
}
5.4)
#include <algorithm> 
#include <iostream>
#include <string>

using namespace std;

void next_permut(char a[], int n)
{
    bool isLastPermut = true;
    int tempDelta, tempSwap, indexSwap;
    for (int i = 0; i < n - 1; i++)
    {
        if (a[n - 1 - i] > a[n - 2 - i])
        {
            isLastPermut = false;
            tempDelta = a[n - 2 - i] - a[n - 1 - i];
            indexSwap = n - 1 - i;
            for (int j = n - 1 - i; j < n; j++)
            {
                if (a[n - 2 - i] - a[j] > tempDelta && a[n - 2 - i] - a[j] < 0)
                {
                    tempDelta = a[n - 2 - i] - a[j];
                    indexSwap = j;
                }
            }
            tempSwap = a[n - 2 - i];
            a[n - 2 - i] = a[indexSwap];
            a[indexSwap] = tempSwap;
            for (int j = n - 1 - i; j < (n - i - 1 + n) / 2; j++)
            {
                tempSwap = a[j];
                a[j] = a[n - j + (n - 2 - i)];
                a[n - j + (n - 2 - i)] = tempSwap;
            }
            break;
        }
    }
    if (isLastPermut)
    {
        for (int i = 0; i < n / 2; i++)
        {
            tempSwap = a[i];
            a[i] = a[n - 1 - i];
            a[n - 1 - i] = tempSwap;
        }
    }
}

int main() {
    int len;
    char a[30];
    cin >> len;
    for (int i = 0; i < len; i++)
    {
        cin >> a[i];
    }
    next_permut(a, len);
    for (int i = 0; i < len; i++)
    {
        cout << a[i] << " ";
    }
}
6.1)
#include <iostream>
#include <vector>

using namespace std;

int seek_bynary(int x, vector <int>& a, int n)
{
    int left = 0, right = n, middle;
    do
    {
        middle = (left + right) / 2;
        if (x == a[middle])
            return middle;
        else
            if (a[middle] < x)
                left = middle + 1;
            else
                right = middle - 1;
    } while (left <= right);
    return -1;
}

int main()
{
    int len, x;
    vector <int> a(1000001);
    cin >> len >> x;
    for (int i = 0; i < len; i++)
    {
        cin >> a[i];
    }
    cout << seek_bynary(x, a, len);
}
6.2)
#include <iostream>
#include <vector>

using namespace std;

int seek_bynary(int x, vector <int>& a, int n)
{
    int left = 0, right = n, middle;
    do
    {
        middle = (left + right) / 2;
        if (x == a[middle])
            return middle;
        else
            if (a[middle] < x)
                left = middle + 1;
            else
                right = middle - 1;
    } while (left <= right);
    return -1;
}

int main()
{
    int len, x;
    vector <int> a(1000001);
    cin >> len >> x;
    for (int i = 0; i < len; i++)
    {
        cin >> a[i];
    }
    cout << seek_bynary(x, a, len);
}
6.3)
#include <iostream>
#include <vector>
#include <cmath>

using namespace std;

int seek_bynary(double x, vector <double>& a, int n)
{
    int left = 0, right = n, middle = 0, indexFirst;
    middle = (left + right) / 2;
    indexFirst = middle;
    double minDelta = abs(x - a[middle]), tempDelta;
    do
    {
        middle = (left + right) / 2;
        //cout << "Middle: " << middle << endl;
        tempDelta = abs(x - a[middle]);
        //cout << "Delta: " << tempDelta << endl;
        if (tempDelta < minDelta)
        {
            indexFirst = middle;
            minDelta = tempDelta;
        }
        if (tempDelta == minDelta)
        {
            if (middle < indexFirst)
                indexFirst = middle;
        }
        if (a[middle] < x)
            left = middle + 1;
        else
            right = middle - 1;
        //cout << left << " " << right << endl;
        /*if ((abs(x - a[left]) <= tempDelta && abs(x - a[right]) <= tempDelta))
        {
            cout << left << " " << right << endl;
            cout << "YEAAAAAAHHH\n";
            if (abs(x - a[left]) <= abs(x - a[right]))
                return left;
            else
                return right;
        }*/
    } while (left <= right);
    if (indexFirst == n)
        indexFirst -= 1;
    return indexFirst;
}

int main()
{
    int len;
    double x;
    vector <double> a(1000001);
    cin >> len >> x;
    for (int i = 0; i < len; i++)
    {
        cin >> a[i];
    }
    cout << seek_bynary(x, a, len);
}
6.4)
#include <iostream>
#include <vector>

using namespace std;

int seek_bynary(int x, vector <int>& a, int n)
{
    int left = 0, right = n, middle, lastIndex = -1;
    do
    {
        middle = (left + right) / 2;
        if (x == a[middle])
        {
            lastIndex = middle;
            left = middle + 1;
        }
        else
            if (a[middle] < x)
                left = middle + 1;
            else
                right = middle - 1;
    } while (left <= right);
    return lastIndex;
}

int main()
{
    int len, N, result = 0, x;
    vector <int> a(100002);
    cin >> len;
    for (int i = 0; i < len; i++)
    {
        cin >> a[i];
    }
    cin >> N;
    while(N > 0)
    {
        cin >> x;
        x += result;
        result = seek_bynary(x, a, len);
        cout << result << endl;
        N -= 1;
    }
}
7.1)
#include <iostream> 
#include <vector>

using namespace std; 

void shellSort(vector <int>& a, int N) 
{ 
  for (int gap = N/2; gap > 0; gap /= 2) 
  { 
    for (int i = gap; i < N; i += 1) 
    { 
      int temp = a[i]; 
      int j; 
      for (j = i; j >= gap && a[j - gap] > temp; j -= gap) 
        a[j] = a[j - gap]; 
      a[j] = temp; 
    } 
  } 
} 

int main() 
{ 
  vector<int> a;
  int len;
  cin >> len;
  a.resize(len);
  for (int i = 0; i < len; i++)
  {
    cin >> a[i];
  }
  shellSort(a, len);
  for (int i = 0; i < len; i++)
  {
    cout << a[i] << " ";
  }
    return 0;
}
7.2)
#include <iostream>
#include <algorithm>

using namespace std;

void select_sort(int a[], int len)
{
  int min, temp;
  for (int i = 0; i < len - 1; i++) 
  {
    min = i;
    for (int j = i + 1; j < len; j++)
    {
      if (a[j] < a[min])
        min = j;      
    }
    temp = a[i];
    a[i] = a[min];
    a[min] = temp;
  }
}

int main() {
  int a[100002];
  int len;
  cin >> len;
  for (int i = 0; i < len; i++)
  {
    cin >> a[i];
  }
  select_sort(a, len);
  for (int i = 0; i < len; i++)
  {
    cout << a[i] << " ";
  }
}
7.3)
#include <iostream>
#include <algorithm>

using namespace std;

void shake_sort(int a[], int len) {
  int left = 1, right = len - 1, i;
  int flag = 1;
  while (left <= right && flag > 0) {
    flag = 0;
    for (i = right; i >= left; i--) {
        if (a[i-1] > a[i]) {
          flag = 1;
            swap(a[i-1], a[i]);
        }
    }
    left++;
    for (i = left; i <= right; i++) {
        if (a[i-1] > a[i]) {
          flag = 1;
          swap(a[i-1], a[i]);
        }
    }
    right--;
  }
}

int main() {
  int a[100002];
  int len;
  cin >> len;
  for (int i = 0; i < len; i++)
  {
    cin >> a[i];
  }
  //int_sort(a, len);
  //select_sort(a, len);
  shake_sort(a, len);
  for (int i = 0; i < len; i++)
  {
    cout << a[i] << " ";
  }
}
8.1)
#include <iostream> 
#include <vector>

using namespace std; 

void shellSort(vector <int>& a, int N) 
{ 
  for (int gap = N/2; gap > 0; gap /= 2) 
  { 
    for (int i = gap; i < N; i += 1) 
    { 
      int temp = a[i]; 
      int j; 
      for (j = i; j >= gap && a[j - gap] > temp; j -= gap) 
        a[j] = a[j - gap]; 
      a[j] = temp; 
    } 
  } 
} 

int main() 
{ 
  vector<int> a;
  int len;
  cin >> len;
  a.resize(len);
  for (int i = 0; i < len; i++)
  {
    cin >> a[i];
  }
  shellSort(a, len);
  for (int i = 0; i < len; i++)
  {
    cout << a[i] << " ";
  }
    return 0;
}
8.2)
#include <iostream>
#include <vector>

using namespace std;

void heapify(vector <int>& arr, int n, int i)
{
    int largest = i;   
    int l = 2*i + 1;
    int r = 2*i + 2;
    if (l < n && arr[l] > arr[largest])
        largest = l;
    if (r < n && arr[r] > arr[largest])
        largest = r;
    if (largest != i)
    {
        swap(arr[i], arr[largest]);
        heapify(arr, n, largest);
    }
}

void heapSort(vector <int>& arr, int n)
{
    for (int i = n/2 - 1; i >= 0; i--)
        heapify(arr, n, i);
    for (int i = n - 1; i >= 0; i--)
    {
        swap(arr[0], arr[i]);
        heapify(arr, i, 0);
    }
}

int main() 
{
  int len;
  cin >> len;
  vector<int> a(len);
  for (int i = 0; i < len; i++)
  {
    cin >> a[i];
  }
  heapSort(a, len);
  for (int i = 0; i < len; i++)
  {
    cout << a[i] << " ";
  }
    return 0;
}
8.3)
#include <iostream>
#include <algorithm>
#include <vector>

using namespace std;

int partition(vector <int>& a, int start, int end)
{
    int pivot = a[end];
    int pIndex = start;
    for (int i = start; i < end; i++)
    {
        if (a[i] <= pivot)
        {
            swap(a[i], a[pIndex]);
            pIndex++;
        }
    }
    swap (a[pIndex], a[end]);
    return pIndex;
}

void quickSort(vector <int>& a, int start, int end)
{
    if (start >= end) {
        return;
    }
    int pivot = partition(a, start, end);
    quickSort(a, start, pivot - 1);
    quickSort(a, pivot + 1, end);
}

int main() 
{ 
  vector<int> a;
  int len;
  cin >> len;
  a.resize(len);
  for (int i = 0; i < len; i++)
  {
    cin >> a[i];
  }
  quickSort(a, 0, len-1);
  for (int i = 0; i < len; i++)
  {
    cout << a[i] << " ";
  }
    return 0;
}
9.1)
#include <iostream>
#include <fstream>
#include <map>

using namespace std;

int main() {

    ifstream file("input.txt");

    map<unsigned char, int> charCount;
    unsigned char symbol;
    while (file.get((char&)symbol)) {
        if (symbol > 12)
            charCount[symbol]++;
    }

    file.close();
    ofstream out;
    out.open("output.txt");
    for (const auto& pair : charCount) {
        out << static_cast<int>(pair.first) << " : " << pair.first << " - " << pair.second << endl;
    }
    out.close();
    return 0;
}
9.2)
#include <iostream>
#include <fstream>
#include <map>

using namespace std;

int main() {

    ifstream file("input.txt");

    map<int, int> stringLengthCount;
    string word;
    while (file >> word) {
        stringLengthCount[word.length()]++;
    }

    file.close();
    ofstream out;
    out.open("output.txt");
    for (const auto& pair : stringLengthCount) {
        out << pair.first << " - " << pair.second << endl;
    }
    out.close();
    return 0;
}
9.3)
#include <iostream>
#include <fstream>
#include <map>
#include <string>

using namespace std;

int main() {

    ifstream in("input.txt");
    string line;
    int count = 0;
    while (getline(in, line)) {
        count++;
    }

    in.close();
    ofstream out;
    out.open("output.txt");
    cout << count;
    out.close();
    return 0;
}
9.4)
#include <iostream>
#include <fstream>
#include <map>

using namespace std;

int main() {
    ifstream file("input.txt");

    map<unsigned char, int> charCount;
    unsigned char symbol;
    while (file.get((char&)symbol)) {
        if (symbol > 31)
            charCount[symbol]++;
    }

    file.close();
    ofstream out;
    out.open("output.txt");
    for (const auto& pair : charCount) {
        out << pair.first << " ";
        for (int i = 0; i < pair.second; i++)
            out << "#";
        out << endl;
    }
    out.close();
    return 0;
}
9.5)
#include <iostream>
#include <fstream>
#include <map>

using namespace std;

int main() {
    int32_t x, y, summa;
    int64_t temp;
    ifstream file("input.bin", ios::binary | ios::in);
    file.read((char*)&x, sizeof x);
    file.read((char*)&y, sizeof x);
    file.close();
    cout << x << " " << y << endl;
    temp = static_cast<int64_t>(x) + static_cast<int64_t>(y);
    summa = static_cast<int32_t>(floor(temp/2.0));
    cout << summa << " " << temp;
    ofstream out("output.bin", ios::binary | ios::out);
    out.write((char*)&summa, sizeof summa); 
    out.close();
}
9.6)
#include <iostream>
#include <fstream>
#include <math.h>
#include <map>

using namespace std;
int32_t swapByte(unsigned int x)
{
    uint32_t swapped = ((x >> 24) & 0xff) | // move byte 3 to byte 0
        ((x << 8) & 0xff0000) | // move byte 1 to byte 2
        ((x >> 8) & 0xff00) | // move byte 2 to byte 1
        ((x << 24) & 0xff000000);
    return swapped;
}

int main() {
    int32_t N, summa = 0, x;
    bool isBig = false;
    ifstream file("input.bin", ios::binary | ios::in);
    file.read((char*)&N, sizeof N);
    if (!(N >= 1 && N <= 10000))
    {
        isBig = true;
        N = swapByte(N);
    }
    if (isBig)
    {
        for (int i = 0; i < N; i++)
        {          
            file.read((char*)&x, sizeof x);
            summa += swapByte(x);
        }
    }
    else
    {
        for (int i = 0; i < N; i++)
        {
            file.read((char*)&x, sizeof x);
            summa += x;
        }
    }
    file.close();
    ofstream out("output.bin", ios::binary | ios::out);
    if (isBig)
    {
        summa = swapByte(summa);
        out.write((char*)&summa, sizeof summa);
    }
    else
        out.write((char*)&summa, sizeof summa);
    out.close();
}
9.7)
#include <iostream>
#include <fstream>
#include <map>

using namespace std;

void heapify(int *arr, int n, int i)
{
    int largest = i;
    int l = 2 * i + 1;
    int r = 2 * i + 2;
    if (l < n && arr[l] > arr[largest])
        largest = l;
    if (r < n && arr[r] > arr[largest])
        largest = r;
    if (largest != i)
    {
        swap(arr[i], arr[largest]);
        heapify(arr, n, largest);
    }
}

void heapSort(int *arr, int n)
{
    for (int i = n / 2 - 1; i >= 0; i--)
        heapify(arr, n, i);
    for (int i = n - 1; i >= 0; i--)
    {
        swap(arr[0], arr[i]);
        heapify(arr, i, 0);
    }
}
int merge(const int* a, int ak, const int* b, int bk, int* res)
{
    int rk = ak + bk;
    for (int i = 0; i < ak; i++)
    {
        res[i] = a[i];
    }
    for (int i = 0; i < bk; i++)
    {
        res[ak + i] = b[i];
    }
    heapSort(res, rk);
    return rk;
}

int main() {
    int32_t N, M, rk;
    ifstream file("input.bin", ios::binary | ios::in);
    file.read((char*)&N, sizeof N);
    file.read((char*)&M, sizeof M);
    int* a = new int[N];
    int* b = new int[M];
    int* res = new int[N + M];
    for (int i = 0; i < N; i++)
    {
        file.read((char*)&a[i], sizeof a[i]);
    }
    for (int i = 0; i < M; i++)
    {
        file.read((char*)&b[i], sizeof b[i]);
    }
    file.close();
    rk = merge(a, N, b, M, res);
    ofstream out("output.bin", ios::binary | ios::out);
    for (int i = 0; i < rk; i++)
    {
        out.write((char*)&res[i], sizeof res[i]);
    }
    
    out.close();
}
9.8)
#include <iostream>
#include <fstream>
#include <map>

using namespace std;

int* partition(int* a, int n, int pivot)
{
    int pivotBool = true;
    int* temp = new int[n];
    int* b = new int[n];
    int countIndexA = 0, countIndexB = 0;
    for (int i = 0; i < n; i++)
    {
        if (a[i] == pivot)
        {
            if (pivotBool)
            {
                pivotBool = false;
                temp[countIndexA++] = a[i];
            }
            else
            {
                pivotBool = true;
                b[countIndexB++] = a[i];
            }
        }
        else
        {
            if (a[i] < pivot)
            {
                temp[countIndexA++] = a[i];
            }
            else
            {
                b[countIndexB++] = a[i];
            }
        }
        
    }
    temp = (int*)realloc(temp, sizeof(int) * (countIndexA));
    b = (int*)realloc(b, sizeof(int) * (countIndexB));
    ofstream out("output.bin", ios::binary | ios::out);
    out.write((char*)&countIndexA, sizeof countIndexA);
    for (int i = 0; i < countIndexA; i++)
    {
        out.write((char*)&temp[i], sizeof temp[i]);
    }
    for (int i = 0; i < countIndexB; i++)
    {
        out.write((char*)&b[i], sizeof b[i]);
    }
    out.close();
    return a;
}

int main() {
    int32_t N, pivot;
    ifstream file("input.bin", ios::binary | ios::in);
    file.read((char*)&N, sizeof N);
    file.read((char*)&pivot, sizeof pivot);
    int* a = new int[N];
    for (int i = 0; i < N; i++)
    {
        file.read((char*)&a[i], sizeof a[i]);
    }
    file.close();
    partition(a, N, pivot);
}
9.9)
#include <iostream>
#include <fstream>
#include <map>

using namespace std;

void sort_direct_merge(int* a, int fsize)
{
    if (fsize < 2) 
        return;
    sort_direct_merge(a, fsize / 2);
    sort_direct_merge(&a[fsize / 2], fsize - (fsize / 2));
    int* buf = new int[fsize];
    int idbuf = 0, idl = 0, idr = fsize / 2;
    while ((idl < fsize / 2) && (idr < fsize))
        if (a[idl] < a[idr])
            buf[idbuf++] = a[idl++];
        else
            buf[idbuf++] = a[idr++];
    while (idl < fsize / 2) 
        buf[idbuf++] = a[idl++];
    while (idr < fsize) 
        buf[idbuf++] = a[idr++];
    for (idl = 0; idl < fsize; idl++)
        a[idl] = buf[idl];
    delete[]buf;
}

int main() {
    int32_t N;
    ifstream file("input.bin", ios::binary | ios::in);
    file.read((char*)&N, sizeof N);
    int* a = new int[N];
    for (int i = 0; i < N; i++)
    {
        file.read((char*)&a[i], sizeof a[i]);
    }
    file.close();
    sort_direct_merge(a, N);
    ofstream out("output.bin", ios::binary | ios::out);
    for (int i = 0; i < N; i++)
    {
        out.write((char*)&a[i], sizeof a);
    }
}
9.10)
#include <iostream>
#include <fstream>
#include <map>
#include <algorithm>

using namespace std;

void qsortRecursive(int* mas, int size) 
{
    int i = 0;
    int j = size - 1;
    int mid = mas[size / 2];
    while (i <= j)
    {
        while (mas[i] < mid) 
        {
            i++;
        }

        while (mas[j] > mid) 
        {
            j--;
        }

        if (i <= j) 
        {
            swap(mas[i], mas[j]);
            i++;
            j--;
        }
    }
    if (j > 0) 
    {
        qsortRecursive(mas, j + 1);
    }
    if (i < size) 
    {
        qsortRecursive(&mas[i], size - i);
    }
}

int main() 
{
    int32_t N;
    ifstream file("input.bin", ios::binary | ios::in);
    file.read((char*)&N, sizeof N);
    int* a = new int[N];
    for (int i = 0; i < N; i++)
    {
        file.read((char*)&a[i], sizeof a[i]);
    }
    file.close();
    qsortRecursive(a, N);
    ofstream out("output.bin", ios::binary | ios::out);
    for (int i = 0; i < N; i++)
    {
        out.write((char*)&a[i], sizeof a[i]);
    }
}
https://mindhalls.ru/quick-sort-c-cpp/ для поржать оставляю ссылку сайта на котором была самая быстрая быстрая сортировка